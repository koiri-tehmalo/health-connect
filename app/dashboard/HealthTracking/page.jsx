"use client";
import { useState, useEffect } from "react";
import { supabase } from "@/lib/supabaseClient";
import dayjs from "dayjs";
import {
  LineChart,
  Line,
  XAxis,
  YAxis,
  Tooltip,
  Legend,
  CartesianGrid,
  ResponsiveContainer,
  BarChart,
  Bar,
} from "recharts";

export default function HealthTrackingPage() {
  const [records, setRecords] = useState([]);
  const [user, setUser] = useState(null);
  const [form, setForm] = useState({
    pulse: "",
    systolic: "",
    diastolic: "",
    temperature: "",
    spo2: "",
    steps: "",
  });
  const [analyze, setAnalyze] = useState(null);
  const [selectedRecord, setSelectedRecord] = useState(null);

  /* -----------------------------
     üìå ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
  ----------------------------- */
  useEffect(() => {
    async function getUser() {
      const { data, error } = await supabase.auth.getUser();
      if (data?.user) setUser(data.user);
    }
    getUser();
  }, []);

  /* -----------------------------
     üì¶ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡∏≠‡∏á user ‡∏ô‡∏±‡πâ‡∏ô
  ----------------------------- */
  async function loadRecords() {
    if (!user) return;
    const { data, error } = await supabase
      .from("health_tracking")
      .select("*")
      .eq("user_id", user.id)
      .order("created_at", { ascending: false });

    if (!error) setRecords(data || []);
  }

  useEffect(() => {
    loadRecords();
  }, [user]);

  /* -----------------------------
     üß† ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û
  ----------------------------- */
  function analyzeHealth(values) {
    const { pulse, systolic, diastolic, temperature, spo2 } = values;
    const results = [];
    let abnormal = 0;

    if (pulse < 60) results.push(`üü° ‡∏ä‡∏µ‡∏û‡∏à‡∏£ ${pulse} bpm ‚Üí ‡∏ï‡πà‡∏≥ (‡∏´‡∏±‡∏ß‡πÉ‡∏à‡πÄ‡∏ï‡πâ‡∏ô‡∏ä‡πâ‡∏≤)`);
    else if (pulse > 100)
      results.push(`üî¥ ‡∏ä‡∏µ‡∏û‡∏à‡∏£ ${pulse} bpm ‚Üí ‡∏™‡∏π‡∏á (‡∏´‡∏±‡∏ß‡πÉ‡∏à‡πÄ‡∏ï‡πâ‡∏ô‡πÄ‡∏£‡πá‡∏ß)`);
    else results.push(`üü¢ ‡∏ä‡∏µ‡∏û‡∏à‡∏£ ${pulse} bpm ‚Üí ‡∏õ‡∏Å‡∏ï‡∏¥ (60‚Äì100 bpm)`);
    if (pulse < 60 || pulse > 100) abnormal++;

    if (systolic > 140 || diastolic > 90)
      results.push(`üî¥ ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô ${systolic}/${diastolic} ‚Üí ‡∏™‡∏π‡∏á`);
    else if (systolic < 90 || diastolic < 60)
      results.push(`üü° ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô ${systolic}/${diastolic} ‚Üí ‡∏ï‡πà‡∏≥`);
    else results.push(`üü¢ ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô ${systolic}/${diastolic} ‚Üí ‡∏õ‡∏Å‡∏ï‡∏¥`);
    if (systolic > 140 || diastolic > 90 || systolic < 90 || diastolic < 60)
      abnormal++;

    if (temperature > 37.5)
      results.push(`üî¥ ‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥ ${temperature}¬∞C ‚Üí ‡∏™‡∏π‡∏á (‡∏≠‡∏≤‡∏à‡∏°‡∏µ‡πÑ‡∏Ç‡πâ)`);
    else if (temperature < 36.0)
      results.push(`üü° ‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥ ${temperature}¬∞C ‚Üí ‡∏ï‡πà‡∏≥ (‡∏£‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏¢‡πÄ‡∏¢‡πá‡∏ô)`);
    else results.push(`üü¢ ‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥ ${temperature}¬∞C ‚Üí ‡∏õ‡∏Å‡∏ï‡∏¥ (36.0‚Äì37.5¬∞C)`);
    if (temperature > 37.5 || temperature < 36.0) abnormal++;

    if (spo2 < 95) results.push(`üî¥ ‡∏Ñ‡πà‡∏≤ SpO‚ÇÇ ${spo2}% ‚Üí ‡∏ï‡πà‡∏≥ (‡∏≠‡∏≤‡∏à‡∏Ç‡∏≤‡∏î‡∏≠‡∏≠‡∏Å‡∏ã‡∏¥‡πÄ‡∏à‡∏ô)`);
    else results.push(`üü¢ ‡∏Ñ‡πà‡∏≤ SpO‚ÇÇ ${spo2}% ‚Üí ‡∏õ‡∏Å‡∏ï‡∏¥ (‚â•95%)`);
    if (spo2 < 95) abnormal++;

    let summary = "";
    if (abnormal === 0) summary = "‚úÖ ‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏õ‡∏Å‡∏ï‡∏¥";
    else if (abnormal <= 2) summary = "‚ö†Ô∏è ‡∏°‡∏µ‡∏ö‡∏≤‡∏á‡∏Ñ‡πà‡∏≤‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥";
    else summary = "‚ùå ‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥‡∏´‡∏•‡∏≤‡∏¢‡∏Ñ‡πà‡∏≤";

    return { results, summary };
  }

  /* -----------------------------
     üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (‡∏Ç‡∏≠‡∏á user ‡∏Ñ‡∏ô‡∏ô‡∏±‡πâ‡∏ô)
  ----------------------------- */
  async function handleSubmit(e) {
    e.preventDefault();
    if (!user) return alert("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡πà‡∏≠‡∏ô");

    const result = analyzeHealth(form);
    setAnalyze(result);

    const { error } = await supabase.from("health_tracking").insert({
      user_id: user.id, // üëà ‡∏ú‡∏π‡∏Å‡∏Å‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
      pulse: Number(form.pulse),
      systolic: Number(form.systolic),
      diastolic: Number(form.diastolic),
      temperature: Number(form.temperature),
      spo2: Number(form.spo2),
      steps: Number(form.steps),
      summary: result.summary,
      details: result.results.join("\n"),
      created_at: new Date(),
    });

    if (error) alert("‚ùå ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: " + error.message);
    else {
      alert("‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢");
      setForm({
        pulse: "",
        systolic: "",
        diastolic: "",
        temperature: "",
        spo2: "",
        steps: "",
      });
      loadRecords();
    }
  }

  /* -----------------------------
     üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥‡πÑ‡∏´‡∏° (‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏µ‡πÅ‡∏î‡∏á)
  ----------------------------- */
  function isAbnormal(field, value, record) {
    switch (field) {
      case "pulse":
        return value < 60 || value > 100;
      case "systolic":
      case "diastolic":
        return (
          record.systolic > 140 ||
          record.diastolic > 90 ||
          record.systolic < 90 ||
          record.diastolic < 60
        );
      case "temperature":
        return value > 37.5 || value < 36.0;
      case "spo2":
        return value < 95;
      default:
        return false;
    }
  }

  /* -----------------------------
     üñºÔ∏è ‡∏™‡πà‡∏ß‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏´‡∏•‡∏±‡∏Å
  ----------------------------- */
  return (
    <div className="space-y-6">
      <h1 className="text-2xl font-semibold">
        ü©∫ ‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏ú‡πà‡∏≤‡∏ô‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏™‡∏ß‡∏°‡πÉ‡∏™‡πà
      </h1>

      {/* ‚úÖ ‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• */}
      <form
        onSubmit={handleSubmit}
        className="grid sm:grid-cols-2 md:grid-cols-3 gap-4 bg-white shadow-md p-6 rounded-lg"
      >
        <input
          className="input"
          type="number"
          placeholder="‡∏ä‡∏µ‡∏û‡∏à‡∏£ (bpm)"
          value={form.pulse}
          onChange={(e) => setForm({ ...form, pulse: e.target.value })}
          required
        />
        <input
          className="input"
          type="number"
          placeholder="‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡∏ö‡∏ô (systolic)"
          value={form.systolic}
          onChange={(e) => setForm({ ...form, systolic: e.target.value })}
          required
        />
        <input
          className="input"
          type="number"
          placeholder="‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡∏•‡πà‡∏≤‡∏á (diastolic)"
          value={form.diastolic}
          onChange={(e) => setForm({ ...form, diastolic: e.target.value })}
          required
        />
        <input
          className="input"
          type="number"
          placeholder="‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡∏£‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏¢ (¬∞C)"
          value={form.temperature}
          onChange={(e) => setForm({ ...form, temperature: e.target.value })}
          required
        />
        <input
          className="input"
          type="number"
          placeholder="‡∏Ñ‡πà‡∏≤ SpO‚ÇÇ (%)"
          value={form.spo2}
          onChange={(e) => setForm({ ...form, spo2: e.target.value })}
          required
        />
        <input
          className="input"
          type="number"
          placeholder="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡πâ‡∏≤‡∏ß (steps)"
          value={form.steps}
          onChange={(e) => setForm({ ...form, steps: e.target.value })}
        />
        <button className="btn btn-primary col-span-full">
          üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        </button>
      </form>

      {/* ‚úÖ ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û */}
      <div className="card">
        <h2 className="text-lg font-semibold mb-3">
          üìà ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û
        </h2>
        <table className="w-full border text-sm">
          <thead className="bg-gray-100">
            <tr>
              <th className="p-2 border">‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà</th>
              <th className="p-2 border">‡∏ä‡∏µ‡∏û‡∏à‡∏£</th>
              <th className="p-2 border">‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô (‡∏ö‡∏ô/‡∏•‡πà‡∏≤‡∏á)</th>
              <th className="p-2 border">‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥</th>
              <th className="p-2 border">SpO‚ÇÇ</th>
              <th className="p-2 border">‡∏Å‡πâ‡∏≤‡∏ß</th>
              <th className="p-2 border">‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå</th>
              <th className="p-2 border text-center">‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î</th>
            </tr>
          </thead>
          <tbody>
            {records.map((r) => (
              <tr key={r.id}>
                <td className="border p-2">
                  {dayjs(r.created_at).format("DD/MM/YYYY HH:mm")}
                </td>
                <td
                  className={`border p-2 text-center ${
                    isAbnormal("pulse", r.pulse, r)
                      ? "text-red-600 font-bold"
                      : ""
                  }`}
                >
                  {r.pulse}
                </td>
                <td
                  className={`border p-2 text-center ${
                    isAbnormal("systolic", r.systolic, r)
                      ? "text-red-600 font-bold"
                      : ""
                  }`}
                >
                  {r.systolic}/{r.diastolic}
                </td>
                <td
                  className={`border p-2 text-center ${
                    isAbnormal("temperature", r.temperature, r)
                      ? "text-red-600 font-bold"
                      : ""
                  }`}
                >
                  {r.temperature}
                </td>
                <td
                  className={`border p-2 text-center ${
                    isAbnormal("spo2", r.spo2, r)
                      ? "text-red-600 font-bold"
                      : ""
                  }`}
                >
                  {r.spo2}
                </td>
                <td className="border p-2 text-center">{r.steps}</td>
                <td
                  className={`border p-2 text-center font-semibold ${
                    r.summary?.includes("‚úÖ")
                      ? "text-green-600"
                      : r.summary?.includes("‚ö†Ô∏è")
                      ? "text-yellow-500"
                      : "text-red-600"
                  }`}
                >
                  {r.summary || "-"}
                </td>
                <td className="border p-2 text-center">
                  <button
                    onClick={() => setSelectedRecord(r)}
                    className="text-blue-600 hover:underline"
                  >
                    üîç ‡∏î‡∏π
                  </button>
                </td>
              </tr>
            ))}
            {records.length === 0 && (
              <tr>
                <td colSpan="8" className="text-center p-3 text-gray-500">
                  ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û
                </td>
              </tr>
            )}
          </tbody>
        </table>
      </div>

      {/* ‚úÖ Modal ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î */}
      {selectedRecord && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white p-6 rounded-xl shadow-lg w-[90%] max-w-lg">
            <h3 className="text-xl font-semibold mb-3 text-center">
              üîç ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ú‡∏•‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á
            </h3>
            <p className="text-gray-600 mb-2 text-center">
              {dayjs(selectedRecord.created_at).format("DD/MM/YYYY HH:mm")}
            </p>
            <ul className="list-disc list-inside text-sm space-y-1 mb-3">
              {(selectedRecord.details || "")
                .split("\n")
                .filter(Boolean)
                .map((line, i) => (
                  <li key={i}>{line}</li>
                ))}
            </ul>
            <p className="font-semibold text-center">
              ‡∏™‡∏£‡∏∏‡∏õ: {selectedRecord.summary}
            </p>
            <div className="mt-4 flex justify-center">
              <button
                onClick={() => setSelectedRecord(null)}
                className="btn border px-4 py-2"
              >
                ‚ùå ‡∏õ‡∏¥‡∏î
              </button>
            </div>
          </div>
        </div>
      )}

      {/* ‚úÖ ‡∏Å‡∏£‡∏≤‡∏ü‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û */}
      <div className="card">
        <h2 className="text-lg font-semibold mb-3">üìâ ‡∏Å‡∏£‡∏≤‡∏ü‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û</h2>
        {records.length === 0 ? (
          <p className="text-gray-500 text-center p-3">‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏£‡∏≤‡∏ü</p>
        ) : (
          <ResponsiveContainer width="100%" height={350}>
            <LineChart data={records.slice().reverse()}>
              <CartesianGrid strokeDasharray="3 3" />
              <XAxis
                dataKey="created_at"
                tickFormatter={(val) => dayjs(val).format("DD/MM")}
              />
              <YAxis />
              <Tooltip />
              <Legend />
              <Line
                type="monotone"
                dataKey="pulse"
                stroke="#4f46e5"
                name="‡∏ä‡∏µ‡∏û‡∏à‡∏£ (bpm)"
              />
              <Line
                type="monotone"
                dataKey="systolic"
                stroke="#ef4444"
                name="‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡∏ö‡∏ô"
              />
              <Line
                type="monotone"
                dataKey="spo2"
                stroke="#10b981"
                name="SpO‚ÇÇ (%)"
              />
            </LineChart>
          </ResponsiveContainer>
        )}
      </div>

      {/* ‚úÖ ‡∏Å‡∏£‡∏≤‡∏ü‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡πâ‡∏≤‡∏ß */}
      <div className="card">
        <h2 className="text-lg font-semibold mb-3">üèÉ‚Äç‚ôÇÔ∏è ‡∏Å‡∏£‡∏≤‡∏ü‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡πâ‡∏≤‡∏ß‡∏ï‡πà‡∏≠‡∏ß‡∏±‡∏ô</h2>
        {records.length === 0 ? (
          <p className="text-gray-500 text-center p-3">‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏£‡∏≤‡∏ü</p>
        ) : (
          <ResponsiveContainer width="100%" height={300}>
            <BarChart data={records.slice().reverse()}>
              <CartesianGrid strokeDasharray="3 3" />
              <XAxis
                dataKey="created_at"
                tickFormatter={(val) => dayjs(val).format("DD/MM")}
              />
              <YAxis />
              <Tooltip />
              <Legend />
              <Bar
                dataKey="steps"
                fill="#3b82f6"
                name="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡πâ‡∏≤‡∏ß (steps)"
                barSize={40}
              />
            </BarChart>
          </ResponsiveContainer>
        )}
      </div>
    </div>
  );
}
