"use client";
import { useEffect, useState } from "react";
import { supabase } from "@/lib/supabaseClient";

/* ============================================================
   üß≠ AdminPage (‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏î‡∏ä‡∏ö‡∏≠‡∏£‡πå‡∏î‡∏´‡∏•‡∏±‡∏Å)
============================================================ */
export default function AdminPage() {
  const [stats, setStats] = useState({});
  const [role, setRole] = useState(null);

  // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
  async function checkRole() {
    const {
      data: { user },
    } = await supabase.auth.getUser();
    if (!user) return;

    const { data } = await supabase
      .from("users")
      .select("role_id")
      .eq("id", user.id)
      .single();

    setRole(data?.role_id || null);
  }

  // ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏£‡∏ß‡∏°
  async function fetchStats() {
    const [usersRes, doctorsRes, apptRes, hospitalsRes] = await Promise.all([
      supabase.from("users").select("id", { count: "exact", head: true }),
      supabase
        .from("users")
        .select("id", { count: "exact", head: true })
        .eq("role_id", 2),
      supabase.from("appointments").select("id", { count: "exact", head: true }),
      supabase.from("hospitals").select("id", { count: "exact", head: true }),
    ]);

    setStats({
      users: usersRes.count || 0,
      doctors: doctorsRes.count || 0,
      appointments: apptRes.count || 0,
      hospitals: hospitalsRes.count || 0,
    });
  }

  useEffect(() => {
    checkRole();
    fetchStats();
  }, []);

  // üö´ ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô ‡∏´‡πâ‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤
  if (role !== 3) {
    return (
      <div className="text-center mt-10 text-gray-500">
        ‚ùå ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô)
      </div>
    );
  }

  // ‚úÖ ‡∏™‡πà‡∏ß‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏´‡∏•‡∏±‡∏Å
  return (
    <div className="space-y-6">
      <h1 className="text-2xl font-semibold">Admin Dashboard</h1>

      {/* ‚úÖ ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏£‡∏ß‡∏° */}
      <div className="grid sm:grid-cols-2 md:grid-cols-4 gap-4">
        <div className="card">
          <h2 className="text-lg font-semibold">üë• ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</h2>
          <p>{stats.users}</p>
        </div>
        <div className="card">
          <h2 className="text-lg font-semibold">ü©∫ ‡πÅ‡∏û‡∏ó‡∏¢‡πå</h2>
          <p>{stats.doctors}</p>
        </div>
        <div className="card">
          <h2 className="text-lg font-semibold">üìÖ ‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢</h2>
          <p>{stats.appointments}</p>
        </div>
        <div className="card">
          <h2 className="text-lg font-semibold">üè• ‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•</h2>
          <p>{stats.hospitals}</p>
        </div>
      </div>

      {/* ‚úÖ ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏• (‡∏ö‡∏ô) ‡πÅ‡∏•‡∏∞ ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ (‡∏•‡πà‡∏≤‡∏á) */}
      <div className="space-y-6">
        <HospitalsTable />
        <UsersTable />
      </div>
    </div>
  );
}

/* ============================================================
   üè• ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏• (‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏°‡∏≠ + ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏≠)
============================================================ */
function HospitalsTable() {
  const [list, setList] = useState([]);
  const [name, setName] = useState("");
  const [address, setAddress] = useState("");
  const [editingHospital, setEditingHospital] = useState(null);
  const [editForm, setEditForm] = useState({ name: "", address: "" });
  const [assigningHospital, setAssigningHospital] = useState(null);
  const [doctors, setDoctors] = useState([]);
  const [selectedDoctor, setSelectedDoctor] = useState("");

  // ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏• + ‡∏´‡∏°‡∏≠
  async function load() {
    const { data: hospitals, error } = await supabase
      .from("hospitals")
      .select("id, name, address")
      .order("id");

    if (error) {
      console.error(error);
      return;
    }

    const { data: doctors } = await supabase
      .from("users")
      .select("id, full_name, hospital_id")
      .eq("role_id", 2);

    const combined = hospitals.map((h) => {
      const doctorList = doctors.filter((d) => d.hospital_id === h.id);
      return {
        ...h,
        doctorCount: doctorList.length,
        doctorNames: doctorList.map((d) => d.full_name),
      };
    });

    setList(combined);
    setDoctors(doctors);
  }

  // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•‡πÉ‡∏´‡∏°‡πà
  async function addHospital(e) {
    e.preventDefault();
    if (!name) return;
    await supabase.from("hospitals").insert({ name, address });
    setName("");
    setAddress("");
    load();
  }

  // ‚úÖ ‡∏•‡∏ö‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•
  async function deleteHospital(id) {
    if (!confirm("‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?")) return;
    const { error } = await supabase.from("hospitals").delete().eq("id", id);
    if (error) alert("‚ùå ‡∏•‡∏ö‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: " + error.message);
    else {
      alert("‚úÖ ‡∏•‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢");
      load();
    }
  }

  // ‚úÖ ‡πÄ‡∏õ‡∏¥‡∏î modal ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
  function openEdit(h) {
    setEditingHospital(h);
    setEditForm({ name: h.name, address: h.address });
  }

  // ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
  async function saveEdit(e) {
    e.preventDefault();
    const { error } = await supabase
      .from("hospitals")
      .update({
        name: editForm.name,
        address: editForm.address,
      })
      .eq("id", editingHospital.id);

    if (error) alert("‚ùå ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: " + error.message);
    else {
      alert("‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢");
      setEditingHospital(null);
      load();
    }
  }

  // ‚úÖ ‡πÄ‡∏õ‡∏¥‡∏î modal ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏≠
  function openAssign(hospital) {
    setAssigningHospital(hospital);
    setSelectedDoctor("");
  }

  // ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏≠ (assign doctor)
  async function assignDoctor(e) {
    e.preventDefault();
    if (!selectedDoctor) return alert("‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏≠");

    const { error } = await supabase
      .from("users")
      .update({ hospital_id: assigningHospital.id })
      .eq("id", selectedDoctor);

    if (error) alert("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡∏°‡∏≠‡πÑ‡∏î‡πâ: " + error.message);
    else {
      alert("‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡∏°‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢");
      setAssigningHospital(null);
      load();
    }
  }

  useEffect(() => {
    load();
  }, []);

  // ‚úÖ ‡∏™‡πà‡∏ß‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
  return (
    <div className="card">
      <h2 className="text-lg font-semibold mb-3">üè• ‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•</h2>

      {/* ‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏• */}
      <form onSubmit={addHospital} className="space-y-2 mb-4">
        <input
          className="input"
          placeholder="‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•"
          value={name}
          onChange={(e) => setName(e.target.value)}
        />
        <input
          className="input"
          placeholder="‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà"
          value={address}
          onChange={(e) => setAddress(e.target.value)}
        />
        <button className="btn btn-primary w-full">‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•</button>
      </form>

      {/* ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏• */}
      <table className="w-full border text-sm">
        <thead className="bg-gray-100">
          <tr>
            <th className="p-2 border">‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•</th>
            <th className="p-2 border text-center">‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏°‡∏≠</th>
            <th className="p-2 border">‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏≠</th>
            <th className="p-2 border">‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà</th>
            <th className="p-2 border text-center">‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£</th>
          </tr>
        </thead>
        <tbody>
          {list.map((h) => (
            <tr key={h.id}>
              <td className="border p-2">{h.name}</td>
              <td className="border p-2 text-center">{h.doctorCount}</td>
              <td className="border p-2">
                {h.doctorNames.length > 0
                  ? h.doctorNames.join(", ")
                  : "‚Äî ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏´‡∏°‡∏≠ ‚Äî"}
              </td>
              <td className="border p-2">{h.address || "-"}</td>
              <td className="border p-2 text-center space-x-2">
                <button
                  onClick={() => openAssign(h)}
                  className="btn border text-xs px-2 py-1 text-blue-600"
                >
                  üßë‚Äç‚öïÔ∏è ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏≠
                </button>
                <button
                  onClick={() => openEdit(h)}
                  className="btn border text-xs px-2 py-1"
                >
                  ‚úèÔ∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
                </button>
                <button
                  onClick={() => deleteHospital(h.id)}
                  className="btn border text-xs px-2 py-1 text-red-600"
                >
                  üóëÔ∏è ‡∏•‡∏ö
                </button>
              </td>
            </tr>
          ))}
          {list.length === 0 && (
            <tr>
              <td colSpan="5" className="text-center p-3 text-gray-500">
                ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•
              </td>
            </tr>
          )}
        </tbody>
      </table>

      {/* ‚úÖ Modal ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç */}
      {editingHospital && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <form
            onSubmit={saveEdit}
            className="bg-white rounded-xl shadow-xl p-6 w-[90%] max-w-md space-y-3 relative z-60"
          >
            <h3 className="text-xl font-semibold mb-2">
              ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•
            </h3>

            <div>
              <label className="label">‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•</label>
              <input
                className="input"
                value={editForm.name}
                onChange={(e) =>
                  setEditForm({ ...editForm, name: e.target.value })
                }
              />
            </div>

            <div>
              <label className="label">‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà</label>
              <input
                className="input"
                value={editForm.address}
                onChange={(e) =>
                  setEditForm({ ...editForm, address: e.target.value })
                }
              />
            </div>

            <div className="flex justify-end gap-2 mt-4">
              <button
                type="button"
                onClick={() => setEditingHospital(null)}
                className="btn border"
              >
                ‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
              </button>
              <button type="submit" className="btn btn-primary">
                üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
              </button>
            </div>
          </form>
        </div>
      )}

      {/* ‚úÖ Modal ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏≠ */}
      {assigningHospital && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <form
            onSubmit={assignDoctor}
            className="bg-white rounded-xl shadow-xl p-6 w-[90%] max-w-md space-y-3 relative z-60"
          >
            <h3 className="text-xl font-semibold mb-2">
              üßë‚Äç‚öïÔ∏è ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡∏°‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤ {assigningHospital.name}
            </h3>

            <label className="label">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏≠</label>
            <select
              className="input"
              value={selectedDoctor}
              onChange={(e) => setSelectedDoctor(e.target.value)}
            >
              <option value="">-- ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏≠ --</option>
              {doctors
                .filter((d) => !d.hospital_id)
                .map((d) => (
                  <option key={d.id} value={d.id}>
                    {d.full_name}
                  </option>
                ))}
            </select>

            <div className="flex justify-end gap-2 mt-4">
              <button
                type="button"
                onClick={() => setAssigningHospital(null)}
                className="btn border"
              >
                ‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
              </button>
              <button type="submit" className="btn btn-primary">
                üíæ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡∏°‡∏≠
              </button>
            </div>
          </form>
        </div>
      )}
    </div>
  );
}


/* ============================================================
   üë• ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
============================================================ */
function UsersTable() {
  const [users, setUsers] = useState([]);
  const [loading, setLoading] = useState(true);
  const [editingUser, setEditingUser] = useState(null);
  const [form, setForm] = useState({
    full_name: "",
    email: "",
    phone: "",
    role_id: 1,
  });

  async function loadUsers() {
    const { data, error } = await supabase
      .from("users")
      .select("id, full_name, email, role_id, phone, created_at")
      .order("created_at", { ascending: false });
    if (!error) setUsers(data || []);
    setLoading(false);
  }

  useEffect(() => {
    loadUsers();
  }, []);

  async function handleDelete(id) {
    const { count, error: countError } = await supabase
      .from("appointments")
      .select("id", { count: "exact", head: true })
      .or(`patient_id.eq.${id},doctor_id.eq.${id}`);

    if (countError) {
      alert("‚ö†Ô∏è ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: " + countError.message);
      return;
    }

    if (count > 0) {
      alert("‚ùå ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ô‡∏µ‡πâ‡∏¢‡∏±‡∏á‡∏°‡∏µ‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏≠‡∏¢‡∏π‡πà ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏ö‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏Å‡πà‡∏≠‡∏ô");
      return;
    }

    if (!confirm("‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?")) return;

    const { error } = await supabase.from("users").delete().eq("id", id);
    if (error) {
      alert("‚ùå ‡∏•‡∏ö‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: " + error.message);
    } else {
      alert("‚úÖ ‡∏•‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢");
      loadUsers();
    }
  }

  function openEdit(user) {
    setEditingUser(user);
    setForm({
      full_name: user.full_name,
      email: user.email,
      phone: user.phone || "",
      role_id: user.role_id,
    });
  }

  async function saveEdit(e) {
    e.preventDefault();
    const { error } = await supabase
      .from("users")
      .update({
        full_name: form.full_name,
        email: form.email,
        phone: form.phone,
        role_id: form.role_id,
      })
      .eq("id", editingUser.id);

    if (error) alert("‚ùå ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: " + error.message);
    else {
      alert("‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢");
      setEditingUser(null);
      loadUsers();
    }
  }

  return (
    <div className="card relative">
      <h2 className="text-lg font-semibold mb-3">üë• ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</h2>

      {loading ? (
        <div>‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î...</div>
      ) : (
        <table className="w-full border text-sm">
          <thead className="bg-gray-100">
            <tr>
              <th className="p-2 border">‡∏ä‡∏∑‡πà‡∏≠</th>
              <th className="p-2 border">‡∏≠‡∏µ‡πÄ‡∏°‡∏•</th>
              <th className="p-2 border">‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£</th>
              <th className="p-2 border">Role</th>
              <th className="p-2 border">‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£</th>
            </tr>
          </thead>
          <tbody>
            {users.map((u) => (
              <tr key={u.id}>
                <td className="border p-2">{u.full_name}</td>
                <td className="border p-2">{u.email}</td>
                <td className="border p-2">{u.phone || "-"}</td>
                <td className="border p-2">{roleLabel(u.role_id)}</td>
                <td className="border p-2 text-center space-x-1">
                  <button
                    onClick={() => openEdit(u)}
                    className="btn border text-xs px-3 py-1"
                  >
                    ‚úèÔ∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
                  </button>
                  <button
                    onClick={() => handleDelete(u.id)}
                    className="btn border text-xs px-3 py-1 text-red-600"
                  >
                    üóëÔ∏è ‡∏•‡∏ö
                  </button>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      )}

      {editingUser && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <form
            onSubmit={saveEdit}
            className="bg-white rounded-xl shadow-xl p-6 w-[90%] max-w-md space-y-3"
          >
            <h3 className="text-xl font-semibold mb-2">‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ</h3>

            <div>
              <label className="label">‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•</label>
              <input
                className="input"
                value={form.full_name}
                onChange={(e) =>
                  setForm({ ...form, full_name: e.target.value })
                }
              />
            </div>

            <div>
              <label className="label">‡∏≠‡∏µ‡πÄ‡∏°‡∏•</label>
              <input
                className="input"
                value={form.email}
                onChange={(e) => setForm({ ...form, email: e.target.value })}
              />
            </div>

            <div>
              <label className="label">‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£</label>
              <input
                className="input"
                value={form.phone}
                onChange={(e) => setForm({ ...form, phone: e.target.value })}
              />
            </div>

            <div>
              <label className="label">Role</label>
              <select
                className="input"
                value={form.role_id}
                onChange={(e) =>
                  setForm({ ...form, role_id: Number(e.target.value) })
                }
              >
                <option value={1}>Patient</option>
                <option value={2}>Doctor</option>
                <option value={3}>Admin</option>
                <option value={4}>Pharmacy</option>
                <option value={5}>Staff</option>
              </select>
            </div>

            <div className="flex justify-end gap-2 mt-4">
              <button
                type="button"
                onClick={() => setEditingUser(null)}
                className="btn border"
              >
                ‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
              </button>
              <button type="submit" className="btn btn-primary">
                üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
              </button>
            </div>
          </form>
        </div>
      )}
    </div>
  );
}

/* ============================================================
   üß© Helper: ‡πÅ‡∏õ‡∏•‡∏á role_id ‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó
============================================================ */
function roleLabel(id) {
  switch (id) {
    case 1:
      return "Patient";
    case 2:
      return "Doctor";
    case 3:
      return "Admin";
    case 4:
      return "Pharmacy";
    default:
      return "Staff";
  }
}
