"use client";
import { useEffect, useState } from "react";
import { supabase } from "@/lib/supabaseClient";
import dayjs from "dayjs";

export default function AppointmentsPage() {
  const [appointments, setAppointments] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState("");
  const [userRole, setUserRole] = useState(null); // üëà ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡πà‡∏ß‡∏ô‡∏ô‡∏µ‡πâ

  // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
  async function getUserRole() {
    const {
      data: { user },
    } = await supabase.auth.getUser();
    if (!user) return;
    const { data } = await supabase
      .from("users")
      .select("role_id")
      .eq("id", user.id)
      .single();
    if (data) {
      setUserRole(
        data.role_id === 1
          ? "patient"
          : data.role_id === 2
          ? "doctor"
          : data.role_id === 3
          ? "admin"
          : null
      );
    }
  }

  async function fetchAppointments() {
    setLoading(true);

    // ‡∏î‡∏∂‡∏á user ‡∏ó‡∏µ‡πà‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏≠‡∏¢‡∏π‡πà
    const {
      data: { user },
    } = await supabase.auth.getUser();
    if (!user) return;

    // ‡∏î‡∏∂‡∏á role ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
    const { data: roleData } = await supabase
      .from("users")
      .select("role_id")
      .eq("id", user.id)
      .single();

    const roleId = roleData?.role_id;

    let query = supabase
      .from("view_appointments_detail") // ‡∏ï‡∏≤‡∏£‡∏≤‡∏á view ‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏±‡∏î (‡∏´‡∏£‡∏∑‡∏≠ appointments ‡∏Å‡πá‡πÑ‡∏î‡πâ)
      .select(
        "id, appt_time, status, notes, doctor_name, patient_id, doctor_id, patient_name"
      )
      .order("appt_time", { ascending: true });

    // üîπ ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏ï‡∏≤‡∏° role
    if (roleId === 1) {
      // ‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢
      query = query.eq("patient_id", user.id);
    } else if (roleId === 2) {
      // ‡πÅ‡∏û‡∏ó‡∏¢‡πå
      query = query.eq("doctor_id", user.id);
    } else if (roleId === 3) {
      // ‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô ‚Üí ‡πÑ‡∏°‡πà‡∏Å‡∏£‡∏≠‡∏á‡∏≠‡∏∞‡πÑ‡∏£ ‡πÄ‡∏´‡πá‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    }

    const { data, error } = await query;
    if (!error) setAppointments(data || []);
    setLoading(false);
  }

  useEffect(() => {
    getUserRole();
    fetchAppointments();
  }, []);

  return (
    <div className="space-y-6">
      <h1 className="text-2xl font-semibold">‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡πÅ‡∏û‡∏ó‡∏¢‡πå (Appointments)</h1>

      {error && <div className="text-red-600">‚ö†Ô∏è {error}</div>}

      <NewAppointment onAdd={fetchAppointments} />

      {loading ? (
        <div>‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î...</div>
      ) : appointments.length === 0 ? (
        <div className="text-gray-500">‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢</div>
      ) : (
        <table className="w-full border text-sm">
          <thead className="bg-gray-100">
            <tr>
              <th className="p-2 border">‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤</th>
              <th className="p-2 border">‡πÅ‡∏û‡∏ó‡∏¢‡πå</th>
              <th className="p-2 border">‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞</th>
              <th className="p-2 border">‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏</th>
              <th className="p-2 border">‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£</th>
            </tr>
          </thead>
          <tbody>
            {appointments.map((a) => (
              <AppointmentRow
                key={a.id}
                appointment={a}
                userRole={userRole}
                onChange={fetchAppointments}
              />
            ))}
          </tbody>
        </table>
      )}
    </div>
  );
}

/* -----------------------------------
   ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡πÉ‡∏´‡∏°‡πà
----------------------------------- */
function NewAppointment({ onAdd }) {
  const [doctorList, setDoctorList] = useState([]);
  const [doctorId, setDoctorId] = useState("");
  const [time, setTime] = useState("");
  const [notes, setNotes] = useState("");
  const [saving, setSaving] = useState(false);
  const [msg, setMsg] = useState("");

  useEffect(() => {
    async function fetchDoctors() {
      const { data, error } = await supabase
        .from("users")
        .select("id, full_name")
        .eq("role_id", [2]); // role_id=2 -> doctor ‡πÉ‡∏ä‡πâ eq ‡πÅ‡∏ó‡∏ô in
      if (!error) setDoctorList(data || []);
    }
    fetchDoctors();
  }, []);

  async function submit(e) {
    e.preventDefault();
    setSaving(true);
    setMsg("");

    const {
      data: { user },
    } = await supabase.auth.getUser();
    if (!user) {
      setMsg("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡πà‡∏≠‡∏ô");
      setSaving(false);
      return;
    }
    const { data: profile } = await supabase
      .from("users")
      .select("role_id")
      .eq("id", user.id)
      .single();

    const { error } = await supabase.from("appointments").insert({
      patient_id: user.id,
      doctor_id: doctorId,
      appt_time: time,
      notes,
    });

    if (error) setMsg("‚ùå " + error.message);
    else {
      setMsg("‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!");
      setDoctorId("");
      setTime("");
      setNotes("");
      onAdd();
    }

    setSaving(false);
  }

  return (
    <form onSubmit={submit} className="card space-y-3 max-w-md">
      <h2 className="text-lg font-semibold">‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡πÉ‡∏´‡∏°‡πà</h2>

      <div>
        <label className="label">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏û‡∏ó‡∏¢‡πå</label>
        <select
          className="input"
          value={doctorId}
          onChange={(e) => setDoctorId(e.target.value)}
          required
        >
          <option value="">-- ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏û‡∏ó‡∏¢‡πå --</option>
          {doctorList.map((doc) => (
            <option key={doc.id} value={doc.id}>
              {doc.full_name}
            </option>
          ))}
        </select>
      </div>

      <div>
        <label className="label">‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤</label>
        <input
          type="datetime-local"
          className="input"
          value={time}
          onChange={(e) => setTime(e.target.value)}
          required
        />
      </div>

      <div>
        <label className="label">‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏</label>
        <textarea
          className="input"
          value={notes}
          onChange={(e) => setNotes(e.target.value)}
        />
      </div>

      <button className="btn btn-primary w-full" disabled={saving}>
        {saving ? "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å..." : "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢"}
      </button>
      {msg && <div className="text-sm text-center mt-2">{msg}</div>}
    </form>
  );
}

/* -----------------------------------
   ‡πÅ‡∏ñ‡∏ß‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ô‡∏±‡∏î + ‡∏õ‡∏∏‡πà‡∏°‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç/‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
----------------------------------- */
function AppointmentRow({ appointment, userRole, onChange }) {
  const [editing, setEditing] = useState(false);
  const [time, setTime] = useState(appointment.appt_time);
  const [notes, setNotes] = useState(appointment.notes || "");
  const [saving, setSaving] = useState(false);

  async function updateAppointment() {
    setSaving(true);
    const { error } = await supabase
      .from("appointments")
      .update({ appt_time: time, notes })
      .eq("id", appointment.id);
    setSaving(false);
    if (!error) {
      setEditing(false);
      onChange();
    }
  }

  async function cancelAppointment() {
    if (!confirm("‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?")) return;
    const { error } = await supabase
      .from("appointments")
      .update({ status: "cancelled" })
      .eq("id", appointment.id);
    if (!error) onChange();
  }
  async function confirmAppointment() {
    const { error } = await supabase
      .from("appointments")
      .update({ status: "confirmed" })
      .eq("id", appointment.id);
    if (!error) onChange();
  }

  return (
    <tr>
      <td className="border p-2">
        {editing ? (
          <input
            type="datetime-local"
            value={dayjs(time).format("YYYY-MM-DDTHH:mm")}
            onChange={(e) => setTime(e.target.value)}
            className="input"
          />
        ) : (
          dayjs(appointment.appt_time).format("YYYY-MM-DD HH:mm")
        )}
      </td>

      <td className="border p-2">{appointment.doctor_name || "‚Äî"}</td>

      <td className="border p-2">
        <span
          className={
            appointment.status === "cancelled"
              ? "text-red-500"
              : appointment.status === "confirmed"
              ? "text-green-600"
              : "text-gray-700"
          }
        >
          {appointment.status}
        </span>
      </td>

      <td className="border p-2">
        {editing ? (
          <input
            value={notes}
            onChange={(e) => setNotes(e.target.value)}
            className="input"
          />
        ) : (
          appointment.notes || "-"
        )}
      </td>
      <td className="border p-2 text-center space-x-1">
        {/* ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏û‡∏ó‡∏¢‡πå ‚Üí ‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏∏‡πà‡∏°‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô */}
        {(userRole === "doctor" || userRole === 2) &&
          appointment.status === "pending" && (
            <button
              onClick={confirmAppointment}
              className="btn btn-primary px-3 py-1 text-xs"
            >
              ‚úÖ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ô‡∏±‡∏î
            </button>
          )}

        {/* ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢ ‚Üí ‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏∏‡πà‡∏°‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç/‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å */}
        {userRole === "patient" && appointment.status === "pending" && (
          <>
            <button
              onClick={() => setEditing(true)}
              className="btn border px-3 py-1 text-xs"
            >
              ‚úèÔ∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
            </button>
            <button
              onClick={cancelAppointment}
              className="btn border px-3 py-1 text-xs text-red-600"
            >
              üóëÔ∏è ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏ô‡∏±‡∏î
            </button>
          </>
        )}

        {appointment.status === "confirmed" && (
          <span className="text-green-700 text-sm">‚úîÔ∏è ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÅ‡∏•‡πâ‡∏ß</span>
        )}
        {appointment.status === "cancelled" && (
          <span className="text-red-500 text-sm">‚ùå ‡∏ñ‡∏π‡∏Å‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å</span>
        )}
      </td>
      <td className="border p-2 text-center space-x-1">
        {editing ? (
          <>
            <button
              onClick={updateAppointment}
              disabled={saving}
              className="btn btn-primary px-3 py-1 text-xs"
            >
              üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
            </button>
            <button
              onClick={() => setEditing(false)}
              className="btn border px-3 py-1 text-xs"
            >
              ‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
            </button>
          </>
        ) : (
          <>
            <button
              onClick={() => setEditing(true)}
              className="btn border px-3 py-1 text-xs"
            >
              ‚úèÔ∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
            </button>
            <button
              onClick={cancelAppointment}
              className="btn border px-3 py-1 text-xs text-red-600"
            >
              üóëÔ∏è ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏ô‡∏±‡∏î
            </button>
          </>
        )}
      </td>
    </tr>
  );
}
